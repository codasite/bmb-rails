version: '3'

tasks:
  ### WORDPRESS ###
  wp:
    desc: WordPress task namespace
    cmds:
      - task --list-all | grep 'wp:'
    silent: true

  wp:pull:
    desc: Try to pull the latest wordpress files from the server
    cmds:
      - ./docker/wordpress/bin/pull-wp.sh

  wp:up:
    aliases:
      - up
    desc: Start all wordpress containers
    cmds:
      - docker compose --profile wp up --build --remove-orphans

  wp:up-detach:
    desc: Start all wordpress containers in detached mode for ci
    cmds:
      - docker compose --profile wp up --build --detach --remove-orphans

  wp:down:
    desc: Stop and remove all wordpress containers
    cmds:
      - docker compose --profile wp down -v

  composer:install:
    desc: Install php dependencies
    dir: ./plugin
    cmds:
      - composer install

  ### TRELLIS ###
  trellis:
    desc: Trellis task namespace
    cmds:
      - task --list-all | grep 'trellis:'
    silent: true

  trellis:up:
    desc: Start trellis development containers using Vagrant (requires Virtual Box)
    dir: ./trellis
    cmds:
      - trellis up

  ### TESTING ###
  wp:test:install:
    desc: Install dependencies and start services
    cmds:
      - docker exec wp-dev install-wp-tests

  wp:test:
    desc: Run all tests
    cmds:
      - docker exec wp-dev composer test -- {{.CLI_ARGS}}
  wp:test:unit:
    desc: Run unit tests using WP_Mock
    cmds:
      - docker exec wp-dev composer test-unit -- {{.CLI_ARGS}}

  wp:test:unit-local:
    desc: Run unit tests locally
    cmds:
      - ./plugin/vendor/bin/phpunit --configuration=plugin/tests/unit/phpunit.xml.dist {{.CLI_ARGS}}

  wp:test:unit:update-snapshots:
    desc: Update unit test snapshots
    cmds:
      - docker exec wp-dev composer test-unit -- -d --update-snapshots

  wp:test:integration:
    desc: Run integration tests with full WordPress environment
    cmds:
      - docker exec wp-dev composer test-integration -- {{.CLI_ARGS}}

  wp:test:coverage:
    desc: Run tests with coverage
    cmds:
      - docker exec wp-dev composer coverage

  wp:test:merge-coverage:
    desc: Merge coverage data
    cmds:
      - docker exec wp-dev composer merge-coverage

  ### DEVELOPMENT ###
  wp:log:
    desc: Read debug log (ignore deprecated warnings)
    cmds:
      - docker exec wp-dev tail -999999 /var/www/html/wp-content/debug.log | grep -v 'deprecated' | less +G

  wp:log:watch:
    desc: Watch debug log in real-time
    cmds:
      - docker exec wp-dev tail -f /var/www/html/wp-content/debug.log | grep -v 'deprecated'

  wp:db:dump:
    desc: Dump the database into the mariadb init folder
    cmds:
      - docker exec wp-dev-db /bin/bash -c 'mariadb-dump -u root -p"$MYSQL_ROOT_PASSWORD" wordpress > /docker-entrypoint-initdb.d/dump.sql'

  wp:db:query:
    desc: Run SQL query
    cmds:
      - docker exec wp-dev-db /bin/bash -c 'mariadb -u root -p"$MYSQL_ROOT_PASSWORD" wordpress -e "{{.CLI_ARGS}}"'

  wp:bash:
    desc: Open a bash shell in the wordpress container
    cmds:
      - docker exec -it wp-dev /bin/bash

  wp:cli:
    desc: Run WP-CLI command
    cmds:
      - docker exec wp-dev wp-cli {{.CLI_ARGS}}

  wp:sync:plugins:
    desc: Sync plugins from the production database to the development container
    dir: ./docker/wordpress
    cmds:
      - rm -rf plugins
      - cat bin/plugins.txt | ssh wpbb@147.182.190.133 "$(cat bin/sync-plugins.sh)"
      - scp wpbb@147.182.190.133:/home/wpbb/plugins.zip .
      - unzip plugins.zip
      - rm -rf plugins.zip

  wp:import:prod:
    desc: Import the production database into the development container
    dir: ./site
    cmds:
      - docker exec wp-dev wp-cli db reset --yes
      - wp @production db export --default-character-set=utf8mb4 - | sed 's/utf8mb4_0900_ai_ci/utf8mb4_unicode_ci/g' | docker exec -i wp-dev wp-cli db import -
      - docker exec wp-dev wp-cli search-replace "https://backmybracket.com" "http://localhost:8008" --all-tables-with-prefix

  wp:cli:notification:
    desc: Run WP-CLI notification command
    cmds:
      - task: wp:cli
        vars:
          CLI_ARGS: wpbb notification {{.CLI_ARGS}}

  ### IMAGES ###
  images:up:
    desc: Start image processing containers
    cmds:
      - docker compose --profile images up --build --remove-orphans

  images:down:
    desc: Stop image processing containers
    cmds:
      - docker compose --profile images down -v

  ### REACT ###
  react:
    desc: React task namespace
    cmds:
      - task --list-all | grep 'react:'
    silent: true

  react:start:
    aliases:
      - start
    desc: Start React development server
    dir: ./react-bracket-builder
    cmds:
      - npm run start:plugin

  react:build:
    desc: Build React application
    dir: ./react-bracket-builder
    cmds:
      - npm run build:plugin

  react:install:
    desc: Install React dependencies
    dir: ./react-bracket-builder
    cmds:
      - npm install

  react:test:
    desc: Run React tests
    dir: ./react-bracket-builder
    cmds:
      - npm run test {{.CLI_ARGS}}

  ### DEPLOYMENT ###
  prod:
    desc: Production task namespace
    cmds:
      - task --list-all | grep 'prod:'
    silent: true

  prod:up:
    desc: Start production containers
    cmds:
      - VERSION_NUMBER=$(date +%Y-%m-%d) docker compose -f compose.yaml -f compose.prod.yaml --profile all -p wpbb up -d --no-build --remove-orphans --force-recreate --pull always

  prod:build:
    desc: Build all production containers
    cmds:
      - VERSION_NUMBER=$(date +%Y-%m-%d) docker compose -f compose.yaml -f compose.prod.yaml --profile all -p wpbb build

  prod:push:
    desc: Push all production containers
    cmds:
      - VERSION_NUMBER=$(date +%Y-%m-%d) docker compose -f compose.yaml -f compose.prod.yaml --profile all -p wpbb push

  ### QUALITY ###
  quality:
    desc: Code quality task namespace
    cmds:
      - task --list-all | grep 'quality:'
    silent: true

  quality:check:
    aliases:
      - check
    desc: Check code quality
    cmds:
      - task: quality:pretty-check
      - task: quality:phpstan

  quality:pretty:
    desc: Format code
    cmds:
      - npm run pretty

  quality:pretty-check:
    desc: Check code formatting
    cmds:
      - npm run pretty:check

  quality:phpstan:
    desc: Run PHPStan analysis
    dir: ./plugin
    cmds:
      - vendor/bin/phpstan analyse -c phpstan.neon --memory-limit 2G .

  quality:namespace-check:
    desc: Check namespace consistency
    dir: ./plugin
    cmds:
      # - python3 ../scripts/namespace_check.py Features Includes Admin Email Public --base-dir . --namespace-prefix WStrategies\\BMB
      - python3 ../scripts/namespace_check.py tests --base-dir . --namespace-prefix WStrategies\\BMB {{.CLI_ARGS}}

  # MOBILE APP #
  flutter:run:
    desc: Run mobile app with the currently selected device in VSCode
    dir: ./bmb_mobile
    cmds:
      - flutter run

  flutter:get:
    desc: Get Flutter dependencies
    dir: ./bmb_mobile
    cmds:
      - flutter pub get

  flutter:add:
    desc: Add a new Flutter dependency
    dir: ./bmb_mobile
    cmds:
      - flutter pub add {{.CLI_ARGS}}

  ios:
    desc: iOS task namespace
    cmds:
      - task --list-all | grep 'ios:'
    silent: true

  ios:clean:
    desc: Clean ios files
    dir: ./bmb_mobile
    cmds:
      - flutter clean && flutter pub get && rm -rf ios/Pods ios/Podfile.lock ; pod install --project-directory=ios

  ios:build:
    desc: Build iOS mobile app
    dir: ./bmb_mobile
    cmds:
      - flutter build ipa --dart-define-from-file=.env.flutter

  ios:push:
    desc: Push iOS app to App Store Connect
    dir: ./bmb_mobile
    cmds:
      - source .env.appstoreconnect && xcrun altool --upload-app --type ios -f build/ios/ipa/*.ipa --apiKey $API_KEY --apiIssuer $API_ISSUER

  ios:deploy:
    desc: Deploy iOS app to App Store Connect
    dir: ./bmb_mobile
    cmds:
      - task: ios:build
      - task: ios:push

  ios:archive:
    desc: Build, archive, and export ipa package
    dir: ./bmb_mobile/ios
    cmds:
      - xattr -w com.apple.xcode.CreatedByBuildSystem true ./build && xcodebuild -quiet clean
      - xcodebuild build -quiet -scheme Runner -sdk iphoneos -destination generic/platform=iOS -workspace Runner.xcworkspace
      - xcodebuild archive -quiet -scheme Runner -sdk iphoneos -destination generic/platform=iOS -workspace Runner.xcworkspace -archivePath ./build/Runner.xcarchive
      - xcodebuild -exportArchive -quiet -archivePath ./build/Runner.xcarchive -exportOptionsPlist ExportOptions.plist -exportPath ./build

  ios:install:
    desc: Install the archived app on a physical device (use `task ios:archive` first)
    dir: ./bmb_mobile/ios
    cmds:
      - source ../.env.devices && xcrun devicectl device install app --device $IOS_DEVICE_ID build/*.ipa

  ios:test-credentials:
    desc: Test App Store Connect API key
    dir: ./bmb_mobile
    cmds:
      - source .env.appstoreconnect && xcrun altool --list-providers -apiKey $API_KEY --apiIssuer $API_ISSUER

  ios:xcode:
    desc: Open Xcode project
    dir: ./bmb_mobile
    cmds:
      - open ios/Runner.xcworkspace

  actions:runner:
    desc: Run the self-hosted runner
    dir: ./actions-runner
    cmds:
      - ./run.sh

  app:version:get:
    desc: Display the current version and build number
    dir: ./bmb_mobile
    cmds:
      - "grep 'version:' pubspec.yaml | sed -E 's/version: (.*)/Current version: \\1/'"

  app:version:bump-build:
    desc: Increment the build number (+1)
    dir: ./bmb_mobile
    cmds:
      - |
        current=$(grep "version:" pubspec.yaml | sed -E "s/version: ([0-9]+\.[0-9]+\.[0-9]+)\+([0-9]+)/\2/")
        next=$((current + 1))
        sed -i "" -E "s/(version: [0-9]+\.[0-9]+\.[0-9]+)\+[0-9]+/\1+$next/" pubspec.yaml
        echo "Build number bumped to +$next"

  app:version:bump-patch:
    desc: Increment the patch version (x.x.X)
    dir: ./bmb_mobile
    cmds:
      - |
        current=$(grep "version:" pubspec.yaml | sed -E "s/version: ([0-9]+\.[0-9]+\.)([0-9]+)\+.*/\2/")
        next=$((current + 1))
        sed -i "" -E "s/(version: [0-9]+\.[0-9]+\.)[0-9]+(\+[0-9]+)/\1$next\2/" pubspec.yaml
        echo "Version bumped to patch $next"
